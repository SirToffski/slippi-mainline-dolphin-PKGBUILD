diff '--color=auto' --unified --recursive --text dolphin-emu-git/CMake/DolphinLibraryTools.cmake dolphin-emu-git.new/CMake/DolphinLibraryTools.cmake
--- dolphin-emu-git/CMake/DolphinLibraryTools.cmake	2023-09-03 17:14:18.469894767 +0200
+++ dolphin-emu-git.new/CMake/DolphinLibraryTools.cmake	2023-09-03 17:15:02.644952068 +0200
@@ -18,3 +18,78 @@
     add_library(${target} ALIAS _${lib})
   endif()
 endfunction()
+
+function(dolphin_optional_system_library library)
+  string(TOUPPER ${library} upperlib)
+  set(USE_SYSTEM_${upperlib} "" CACHE STRING "Use system ${library} instead of bundled.  ON - Always use system and fail if unavailable, OFF - Always use bundled, AUTO - Use system if available, otherwise use bundled, blank - Delegate to USE_SYSTEM_LIBS.  Default is blank.")
+  if("${USE_SYSTEM_${upperlib}}" STREQUAL "")
+    if(APPROVED_VENDORED_DEPENDENCIES)
+      string(TOLOWER ${library} lowerlib)
+      if(lowerlib IN_LIST APPROVED_VENDORED_DEPENDENCIES)
+        set(RESOLVED_USE_SYSTEM_${upperlib} AUTO PARENT_SCOPE)
+      else()
+        set(RESOLVED_USE_SYSTEM_${upperlib} ON PARENT_SCOPE)
+      endif()
+    else()
+      set(RESOLVED_USE_SYSTEM_${upperlib} ${USE_SYSTEM_LIBS} PARENT_SCOPE)
+    endif()
+  else()
+    set(RESOLVED_USE_SYSTEM_${upperlib} ${USE_SYSTEM_${upperlib}} PARENT_SCOPE)
+  endif()
+endfunction()
+
+function(dolphin_add_bundled_library library bundled_path)
+  string(TOUPPER ${library} upperlib)
+  if (${RESOLVED_USE_SYSTEM_${upperlib}} STREQUAL "AUTO")
+    message(STATUS "No system ${library} was found.  Using static ${library} from Externals.")
+  else()
+    message(STATUS "Using static ${library} from Externals")
+  endif()
+  if (NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${bundled_path}/CMakeLists.txt")
+    message(FATAL_ERROR "No bundled ${library} was found.  Did you forget to checkout submodules?")
+  endif()
+  add_subdirectory(${bundled_path} EXCLUDE_FROM_ALL)
+endfunction()
+
+function(dolphin_find_optional_system_library library bundled_path)
+  dolphin_optional_system_library(${library})
+  string(TOUPPER ${library} upperlib)
+  if(RESOLVED_USE_SYSTEM_${upperlib})
+    find_package(${library} ${ARGN})
+    # Yay for cmake packages being inconsistent
+    if(DEFINED ${library}_FOUND)
+      set(prefix ${library})
+    else()
+      set(prefix ${upperlib})
+    endif()
+    if((NOT ${found}) AND (NOT ${RESOLVED_USE_SYSTEM_${upperlib}} STREQUAL "AUTO"))
+      message(FATAL_ERROR "No system ${library} was found.  Please install it or set USE_SYSTEM_${upperlib} to AUTO or OFF.")
+    endif()
+  endif()
+  if(${prefix}_FOUND)
+    message(STATUS "Using system ${library}")
+    set(${prefix}_TYPE "System" PARENT_SCOPE)
+  else()
+    dolphin_add_bundled_library(${library} ${bundled_path})
+    set(${prefix}_TYPE "Bundled" PARENT_SCOPE)
+  endif()
+endfunction()
+
+function(dolphin_find_optional_system_library_pkgconfig library search alias bundled_path)
+  dolphin_optional_system_library(${library})
+  string(TOUPPER ${library} upperlib)
+  if(RESOLVED_USE_SYSTEM_${upperlib})
+    pkg_check_modules(${library} ${search} ${ARGN} IMPORTED_TARGET)
+    if((NOT ${library}_FOUND) AND (NOT ${RESOLVED_USE_SYSTEM_${upperlib}} STREQUAL "AUTO"))
+      message(FATAL_ERROR "No system ${library} was found.  Please install it or set USE_SYSTEM_${upperlib} to AUTO or OFF.")
+    endif()
+  endif()
+  if(${library}_FOUND)
+    message(STATUS "Using system ${library}")
+    dolphin_alias_library(${alias} PkgConfig::${library})
+    set(${library}_TYPE "System" PARENT_SCOPE)
+  else()
+    dolphin_add_bundled_library(${library} ${bundled_path})
+    set(${library}_TYPE "Bundled" PARENT_SCOPE)
+  endif()
+endfunction()
\ No newline at end of file
diff '--color=auto' --unified --recursive --text dolphin-emu-git/CMake/FindMBEDTLS.cmake dolphin-emu-git.new/CMake/FindMBEDTLS.cmake
--- dolphin-emu-git/CMake/FindMBEDTLS.cmake	2023-09-03 17:14:18.470894768 +0200
+++ dolphin-emu-git.new/CMake/FindMBEDTLS.cmake	2023-09-03 17:19:19.881281347 +0200
@@ -1,8 +1,8 @@
-find_path(MBEDTLS_INCLUDE_DIR mbedtls/ssl.h)
+find_path(MBEDTLS_INCLUDE_DIR mbedtls/ssl.h PATH_SUFFIXES mbedtls2)
 
-find_library(MBEDTLS_LIBRARY mbedtls)
-find_library(MBEDX509_LIBRARY mbedx509)
-find_library(MBEDCRYPTO_LIBRARY mbedcrypto)
+find_library(MBEDTLS_LIBRARY mbedtls PATH_SUFFIXES mbedtls2)
+find_library(MBEDX509_LIBRARY mbedx509 PATH_SUFFIXES mbedtls2)
+find_library(MBEDCRYPTO_LIBRARY mbedcrypto PATH_SUFFIXES mbedtls2)
 
 set(MBEDTLS_INCLUDE_DIRS ${MBEDTLS_INCLUDE_DIR})
 set(MBEDTLS_LIBRARIES ${MBEDTLS_LIBRARY} ${MBEDX509_LIBRARY} ${MBEDCRYPTO_LIBRARY})
diff '--color=auto' --unified --recursive --text dolphin-emu-git/CMakeLists.txt dolphin-emu-git.new/CMakeLists.txt
--- dolphin-emu-git/CMakeLists.txt	2023-09-03 17:14:18.470894768 +0200
+++ dolphin-emu-git.new/CMakeLists.txt	2023-09-03 17:20:21.816359744 +0200
@@ -796,20 +796,9 @@
   add_subdirectory(Externals/zstd)
 endif()
 
-add_subdirectory(Externals/zlib-ng)
+dolphin_find_optional_system_library_pkgconfig(ZLIB zlib-ng ZLIB::ZLIB Externals/zlib-ng)
 
-find_package(ZLIB REQUIRED)
-
-pkg_check_modules(MINIZIP minizip>=3.0.0)
-if(MINIZIP_FOUND)
-  message(STATUS "Using shared minizip")
-  include_directories(${MINIZIP_INCLUDE_DIRS})
-else()
-  check_vendoring_approved(minizip)
-  message(STATUS "Shared minizip not found, falling back to the static library")
-  add_subdirectory(Externals/minizip)
-  include_directories(External/minizip)
-endif()
+dolphin_find_optional_system_library_pkgconfig(MINIZIP minizip-ng>=3.0.0 minizip::minizip Externals/minizip)
 
 if(NOT APPLE)
   check_lib(LZO "(no .pc for lzo2)" lzo2 lzo/lzo1x.h QUIET)
